namespace = decentralized
#########################
# Initial events
#########################
# Decentralizer
country_event = {
	id = decentralized.1
	title = "decentralized.1.name"
	desc = "decentralized.1.desc"
	picture = GFX_evt_city_planet
	is_triggered_only = yes
	immediate = {
		set_update_modifiers_batch = begin

		save_global_event_target_as = decentralizer
		set_country_flag = decentralizer
		add_modifier = { modifier = decentralized_leader days = -1 }

		while = {
			limit = {
				any_system_within_border = {
					exists = starbase
					any_system_planet = { is_colony = yes num_pops > 4 }
					NOR = {
						has_star_flag = decentral_excluded
						any_system_planet = { is_capital = yes }
						# any_neighbor_system = { is_same_value = ROOT.capital_scope.solar_system }
					}
				}
			}
			random_system_within_border = {
				limit = {
					exists = starbase
					any_system_planet = { is_colony = yes num_pops > 4 }
					NOR = {
						has_star_flag = decentral_excluded
						any_system_planet = { is_capital = yes }
						# any_neighbor_system = { is_same_value = ROOT.capital_scope.solar_system }
					}
				}
				random_system_planet = {
					limit = {
						is_colony = yes num_pops > 4 is_under_colonization = no
						is_owned_by = ROOT
						# is_capital = no
					}
					get_vassal_species = yes # event_target:vassal_species

					create_country = {
						name = "[This.GetStarName]"
						name_list = ROOT
						type = default
						# ship_prefix = ""
						authority = random # auth_imperial
						civics = random
						species = event_target:vassal_species
						flag = random # separate color definition not possible!?
						randomize_ethos = yes
						ethos = random
						ignore_initial_colony_error = yes
						day_zero_contact = no
						exclude_day_zero_contact = root
						origin = origin_hegemon_npc # origin_default
						effect = {
							# log = "a [Root.GetName] - [From.GetName]"
							set_country_flag = first_alien_life
							set_country_flag = has_encountered_other_empire

							copy_ethos_and_authority = ROOT
							set_subject_of = {
								who = ROOT
								subject_type = member_state
							}
							set_timed_country_flag = { flag = day_0 days = 30 }
							ROOT = {
								set_country_flag = has_communications@prev
								set_timed_country_flag = { flag = day_0 days = 30 }
								establish_communications_no_message = PREV
								# establish_contact = { who = PREV location = ROOT.capital_scope }
							}
							establish_communications_no_message = root
							country_event = { id = decentralized.3 days = 7 }
							# create_starting_leaders = yes # DO later
						}
					}
					solar_system = {
						starbase = { set_owner = last_created_country }
						every_system_planet = {
							limit = {
								has_owner = yes
								is_colony = yes
								is_owned_by = ROOT
								has_ground_combat = no
								is_occupied_flag = no
							}
							set_owner = last_created_country
						}
					}
				}
			}
		}
		set_update_modifiers_batch = end

		country_event = { id = decentralized.4 days = 8 }
	}
	option = {
		name = OK
		capital_scope = {
			add_modifier = { modifier = "planetary_nationalism" days = -1 }
		}
	}
}

# triggers special project for decentralization
country_event = {
	id = decentralized.2
	title = "decentralized.2.name"
	desc = "decentralized.2.desc"
	picture = GFX_evt_partition
	location = capital_scope
	is_triggered_only = yes
	trigger = { has_ascension_perk = ap_decentralization }
	immediate = {
		capital_scope = {
			enable_special_project = {
				name = "DECENTRALIZATION_PROJECT"
				location = this
				owner = ROOT
			}
			# Pre-exclude near capital systems!?
			solar_system = {
				set_timed_star_flag = { flag = decentral_excluded days = 30 }
				every_neighbor_system = {
					limit = {
						has_owner = yes
						is_owned_by = ROOT
					}
					set_timed_star_flag = { flag = decentral_excluded days = 30 }
				}
			}
		}
	}
	option = { name = OK }
}

# Gives out systems around planets to new countries
# THIS = New Member State
# FROM = decentralizer
country_event = {
	id = decentralized.3
	# title = "decentralized.3"
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		establish_communications_no_message = FROM
		# establish_contact = { who = FROM location = FROM.capital_scope }
		capital_scope = {
			solar_system = {
				every_neighbor_system = {
					limit = {
						is_owned_by = FROM
						NOT = { any_system_planet = { is_colony = yes } }
					}
					starbase = { set_owner = ROOT }
					every_system_planet = {
						limit = {
							has_owner = yes
							is_owned_by = FROM
							has_ground_combat = no
							is_occupied_flag = no
						}
						set_owner = ROOT
					}
				}
			}
			add_modifier = { modifier = "planetary_nationalism" days = -1 }
		}
		add_modifier = { modifier = "SUBJECT_member_state" days = -1 }
		# Merge to small empires
		if = {
			limit = {
				controlled_systems = 1
				# any_system_within_border = { NOT = { is_same_value = capital_scope.solar_system } }
			}
			capital_scope.solar_system = {
				# log = "merge [Root.GetName]"
				random_neighbor_system = {
					limit = {
						has_owner = yes
						any_system_planet = { is_colony = yes }
						space_owner = {
							is_subject = yes
							is_country_type = default
							FROM = { is_overlord_to = PREV }
						}
					}
					# log = "merge to [This.GetName]"
					PREV = {
						starbase = { set_owner = PREVPREV.space_owner }
						# log = "set_owner [This.GetName] - [PREVPREVPREV.Owner.GetName]"
						every_system_planet = {
							limit = {
								has_owner = yes
								is_colony = yes
								is_owned_by = ROOT
								has_ground_combat = no
								is_occupied_flag = no
							}
							set_owner = PREVPREV.space_owner
						}
					}
				}
			}
		}
	}
}

# MID PERK GENERATION - Distributes remaining systems
# ROOT = decentralizer
country_event = {
	id = decentralized.4
	title = "decentralized.4.name"
	desc = "decentralized.4.desc"
	picture = GFX_evt_galactic_senate
	is_triggered_only = yes
	immediate = {
		every_system_within_border = {
			limit = {
				NOR = {
					has_star_flag = decentral_excluded
					any_system_planet = { is_colony = yes }
				}
			}
			closest_system = {
				# min_steps = 1
				max_steps = 3
				# use_bypasses = yes
				limit = {
					has_owner = yes
					NOT = { is_owned_by = ROOT }
					any_system_planet = {
						is_colony = yes
						owner = {
							is_subject = yes
							is_country_type = default
							is_loyal_to = ROOT
							ROOT = { is_overlord_to = PREV }
						}
					}
				}
				PREV.starbase = { set_owner = PREV.space_owner }
			}
		}
		# Take direct neighbor systems back
		capital_scope = {
			solar_system = {
				every_neighbor_system = {
					limit = {
						has_owner = yes
						space_owner = {
							is_subject = yes
							OR = {
								is_country_type = default
								is_subject_type = member_state
							}
							is_loyal_to = ROOT
							ROOT = { is_overlord_to = PREV }
						}
					}
					starbase = { set_owner = ROOT }
					every_system_planet = {
						limit = {
							has_owner = yes
							has_ground_combat = no
							is_occupied_flag = no
							owner = {
								is_subject = yes
								OR = {
									is_country_type = default
									is_subject_type = member_state
								}
								is_loyal_to = ROOT
								ROOT = { is_overlord_to = PREV }
							}
						}
						set_owner = ROOT
					}
				}
			}
		}

		every_subject = {
			limit = { is_country_type = default }
			# Merge to small empires (default empire type only)
			ROOT = { change_variable = { which = subject_member value = 1 } }
			if = {
				limit = {
					controlled_systems < 3
					# any_system_within_border = { NOT = { is_same_value = capital_scope.solar_system } }
				}
				capital_scope.solar_system = {
					# log = "merge [PREV.GetName]"
					random_neighbor_system = {
						limit = {
							has_owner = yes
							any_system_planet = { is_colony = yes }
							space_owner = {
								is_subject = yes
								OR = {
									is_country_type = default
									is_subject_type = member_state
								}
								is_loyal_to = ROOT
								ROOT = { is_overlord_to = PREV }
							}
						}
						# log = "merge to [This.GetName]"
						PREVPREV = {
							PREV.space_owner = { fully_commit_to_empire = yes }
						}
						# PREV = {
						# 	starbase = { set_owner = PREVPREV.space_owner }
							# log = "set_owner [This.GetName] - [PREVPREVPREV.Owner.GetName]"
					}
				}
			}
		}
		# Last check (try to give at least one extra system)
		# log = "subject member [Root.subject_member]"
		every_subject = {
			limit = { is_subject_type = member_state }
			if = { limit = { controlled_systems < 4 }
				capital_scope.solar_system = {
					if = { limit = { ROOT = { check_variable = { which = subject_member value < 9 } } }
						# Give a system
						random_neighbor_system = {
							limit = {
								has_owner = yes
								# any_system_planet = { is_colony = no }
								OR = {
									space_owner = {
										is_subject = yes
										is_country_type = default
										is_subject_type = member_state
										# is_loyal_to = ROOT
										ROOT = { is_overlord_to = PREV }
									}
									# space_owner = { is_overlord_to = PREVPREVPREV }
									NOR = {
										has_star_flag = decentral_excluded
										any_system_planet = { is_capital = yes }
									}
									is_owned_by = ROOT
								}
							}
							starbase = { set_owner = PREVPREV.space_owner }
							every_system_planet = {
								limit = {
									has_owner = yes
									has_ground_combat = no
									is_occupied_flag = no
									OR = {
										owner = {
											is_subject = yes
											is_subject_type = member_state
											# is_loyal_to = ROOT
											ROOT = { is_overlord_to = PREV }
										}
										is_owned_by = ROOT
									}
								}
								set_owner = PREVPREV.space_owner
							}
						}
					}
					else = { #(Reduce members)
						PREV = { # subject
							random_neighbor_country = {
								limit = {
									OR = {
										AND = {
											is_subject = yes
											is_country_type = default
											is_loyal_to = ROOT
											ROOT = { is_overlord_to = PREV }
										}
										# is_same_empire = ROOT
									}
								}
								fully_commit_to_empire = yes
							}
						}
					}
				}
			}
			# Increase subject size
			if = {
				limit = {
					exists = this # without the game crashes
					controlled_systems > 2
					controlled_systems < 6
					ROOT = { empire_sprawl_cap_fraction > 2.0 }
					# ROOT = { check_variable = { which = subject_member value < 8 } } TODO
				}
				random_system_within_border = {
					limit = {
						# # pretrigger
						# any_bordering_country = {
						# 	NOT = { is_same_empire = PREVPREV }
						# 	OR = {
						# 		AND = {
						# 			is_subject = yes
						# 			is_subject_type = member_state
						# 			is_loyal_to = ROOT
						# 			ROOT = { is_overlord_to = PREV }
						# 		}
						# 		is_same_empire = ROOT
						# 	}
						# }
						# concrete trigger
						any_neighbor_system = {
							has_owner = yes
							owner = { NOT = { is_same_empire = PREVPREVPREV } }
							OR = {
								space_owner = {
									is_subject = yes
									is_subject_type = member_state
									is_loyal_to = ROOT
									ROOT = { is_overlord_to = PREV }
								}
								AND = {
									is_owned_by = ROOT
									NOR = {
										has_star_flag = decentral_excluded
										is_same_value = ROOT.capital_scope.solar_system
									}
								}
							}
						}
					}
					every_neighbor_system = {
						limit = {
							has_owner = yes
							owner = { NOT = { is_same_empire = PREVPREVPREV } }
							OR = {
								space_owner = {
									is_subject = yes
									is_subject_type = member_state
									is_loyal_to = ROOT
									ROOT = { is_overlord_to = PREV }
								}
								AND = {
									is_owned_by = ROOT
									NOR = {
										has_star_flag = decentral_excluded
										is_same_value = ROOT.capital_scope.solar_system
									}
								}
							}
						}
						starbase = { set_owner = PREVPREV.space_owner }
						every_system_planet = {
							limit = {
								has_owner = yes
								has_ground_combat = no
								is_occupied_flag = no
								OR = {
									planet_owner = {
										is_subject = yes
										is_subject_type = member_state
										ROOT = { is_overlord_to = PREV }
									}
									is_owned_by = ROOT
								}
							}
							if = { limit = { is_capital = yes }
								# fully commit empire (otherwise systems can relegate)
								planet_owner = {
									PREVPREVPREV.space_owner = { fully_commit_to_empire = yes }
								}
							} else = {
								if = { limit = { PREVPREV = { is_owned_by = ROOT } }
									remove_modifier = planetary_nationalism
								}
								set_owner = PREVPREV.space_owner
							}
						}
					}
				}
			}

			if = {
				limit = { exists = this } # without the game crashes
				# action_open_borders
				set_closed_borders = {
					who = ROOT
					status = no
					forced = 5
				}
				ROOT = {
					# action_open_borders
					set_closed_borders = {
						who = PREV
						status = no
						forced = 5
					}
					# # Survey Own Space
					# every_planet_within_border = {
					# 	surveyed = {
					# 		set_surveyed = yes
					# 		surveyor = PREVPREV
					# 	}
					# }
				}
			}
			# FROM = {
			# 	every_federation_ally = {
			# 		establish_communications = PREVPREV
			# 	}
			# 	every_relation = {
			# 		establish_communications_no_message = PREVPREV
			# 	}
			# }
		}
		## Galactic Community & Intel
		if = {
			limit = {
				is_galactic_community_formed = yes
				ROOT = { is_galactic_community_member = yes }
				# ROOT = { has_federation = yes }
			}
			every_subject = {
				limit = { is_subject_type = member_state is_galactic_community_member = no }
				add_to_galactic_community_no_message = yes
				add_intel = { amount = 60 who = ROOT }
				ROOT = {
					add_intel = { amount = 60 who = prev }
					every_subject = {
						limit = { is_subject_type = member_state NOT = { is_same_empire = prevprev } }
						add_intel = { amount = 40 who = prevprev }
					}
				}
			}
		}
	}
	option = { name = OK }
	after = {
		hidden_effect = {
			# Opportunity to change vassals into Member States
			country_event = { id = decentralized.7 days = 60 random = 20 }
			country_event = { id = decentralized.215 days = 5 random = 2 }
		}
	}

} # END PERK GENERATION

###############################
# On action events
###############################
planet_event = {
	id = decentralized.5
	# title = "decentralized.5"
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_modifier = planetary_nationalism
		FROM = {
			NOT = { is_subject_type = member_state }
		}
	}
	immediate = {
		remove_modifier = planetary_nationalism
		if = {
			limit = {
				FROM = { NOT = { has_country_flag = day_0 } }
			}
			add_modifier = { modifier = autonomy_lost days = 1800 }
		}
	}
}

# Deprecated
event = {
	id = decentralized.6
	# title = "decentralized.6"
	picture = GFX_evt_throne_room
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_playable_country = {
			is_subject_type = vassal
			overlord = { has_country_flag = decentralizer }
		}
	}
	immediate = {
		every_playable_country = {
			limit = {
				overlord = { has_country_flag = decentralizer }
			}
			overlord = {
				country_event = { id = decentralized.7 }
			}
		}
	}
}

# Sends event to decentralizer if a Member State grows too large.
planet_event = {
	id = decentralized.8
	# title = "decentralized.8"
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		FROM = {
			NOT = { has_country_flag = day_0 }
			is_subject_type = member_state
			count_owned_starbase = { count > 6 }
		}
	}
	immediate = {
		save_event_target_as = new_planet
		FROM = {
			save_event_target_as = ultimatum_subject
			overlord = {
				country_event = { id = decentralized.9 }
			}
		}
	}
}

#####################################
# Established Events
#####################################
# Opportunity to change vassals into Member States
country_event = {
	id = decentralized.7
	title = "decentralized.7.name"
	desc = "decentralized.7.desc"
	picture = GFX_evt_throne_room
	is_triggered_only = yes
	trigger = {
		exists = this
		is_scope_type = country
		has_country_flag = decentralizer
		any_subject = {
			OR = {
				is_country_type = default
				is_subject_type = vassal
				is_subject_type = subsidiary
			}
			NOT = { has_country_flag = day_0 }
		}
	}
	immediate = {}

	option = {
		name = decentralized.7.a
		trigger = {
			exists = FROM
			FROM = {
				is_scope_type = country
				is_subject = yes
				NOR = {
					is_subject_type = member_state
					has_country_flag = day_0
				}
				OR = {
					is_country_type = default
					is_subject_type = vassal
					is_subject_type = subsidiary
				}
			}
			is_overlord_to = FROM
		}
		hidden_effect = {
			FROM = {
				set_subject_of = {
					who = ROOT
					subject_type = member_state
				}
				# add_resource = { influence = 40 }
			}
			add_resource = { influence = -10 }
			save_event_target_as = decentralizer
			country_event = { id = decentralized.209 }
		}
	}

	option = {
		name = decentralized.7.b
		exclusive_trigger = {
			exists = event_target:decentralizer
			is_same_empire = event_target:decentralizer
			count_subject = {
				count > 1
				limit = {
					NOT = { is_subject_type = member_state }
					OR = {
						is_country_type = default
						is_subject_type = vassal
						is_subject_type = subsidiary
					}
				}
			}
		}
		every_subject = {
			limit = {
				NOT = { is_subject_type = member_state }
				OR = {
					is_country_type = default
					is_subject_type = vassal
					is_subject_type = subsidiary
				}
			}
			set_subject_of = {
				who = ROOT
				subject_type = member_state
			}
			add_resource = { influence = 100 }
			set_timed_country_flag = { flag = day_0 days = 10 }
		}
		hidden_effect = {
			add_resource = { influence = -20 }
		}
	}
	option = {
		name = decentralized.7.c
		allow = {
			hidden_trigger = { has_resource = { type = influence amount > 19 } }
		}
		hidden_effect = {
			random_subject = {
				limit = {
					NOT = { is_subject_type = member_state }
					OR = {
						is_country_type = default
						is_subject_type = vassal
						is_subject_type = subsidiary
					}
				}
				set_timed_country_flag = { flag = day_0 days = 10 }
			}
		}
	}
	after = {
		hidden_effect = {
			add_resource = { influence = -10 }
			clear_global_event_target = decentralizer
		}
	}
}

# Gives member_state an ultimatum for releasing a planet
country_event = {
	id = decentralized.9
	title = "decentralized.9.name"
	desc = "decentralized.9.desc"
	picture = GFX_evt_throne_room
	is_triggered_only = yes
	trigger = {
		has_resource = { type = influence amount > 149 }
	}
	immediate = { }
	option = {
		name = decentralized.9.a
		save_global_event_target_as = decentralizer
		add_resource = { influence = -150 }
		event_target:ultimatum_subject = {
			country_event = { id = decentralized.10 }
		}
	}
	option = { name = decentralized.9.b }
}

# country_event = {
# 	id = decentralized.13
# 	title = "decentralized.13.name"
# 	desc = "decentralized.13.desc"
# 	picture = GFX_evt_throne_room
# 	is_triggered_only = yes
# 	immediate = {
# 	}
# 	option = { name = OK }
# }

# Ask Member States for resources. triggered by edict
country_event = {
	id = decentralized.14
	title = "decentralized.14.name"
	desc = "decentralized.14.desc"
	picture = GFX_evt_financial_instruments
	is_triggered_only = yes
	immediate = { save_event_target_as = resource_asker }
	# 200
	option = {
		name = decentralized.14.a
		allow = {
			hidden_trigger = { has_resource = { type = influence amount > 44 } }
		}
		add_resource = { influence = -45 }
		every_subject = {
			limit = { is_subject_type = member_state }
			country_event = { id = decentralized.15 }
		}
	}
	# 500
	option = {
		name = decentralized.14.b
		allow = {
			hidden_trigger = { has_resource = { type = influence amount > 89 } }
		}
		add_resource = { influence = -90 }
		every_subject = {
			limit = { is_subject_type = member_state }
			country_event = { id = decentralized.16 }
		}
	}
	# 1000
	option = {
		name = decentralized.14.c
		allow = {
			hidden_trigger = { has_resource = { type = influence amount > 179 } }
		}
		trigger = {  }
		add_resource = { influence = -180 }
		every_subject = {
			limit = { is_subject_type = member_state }
			country_event = { id = decentralized.17 }
		}
	}
	# option = { name = distar.1055.b } # needs reset edict counter?
	option = { name = TRADE_OFFER_NOTHING }
}

# A Member State reports another Member State for harrasing their trade
country_event = {
	id = decentralized.23
	title = "decentralized.23.name"
	desc = "decentralized.23.desc"
	picture = GFX_evt_assembly_fight
	is_triggered_only = yes
	immediate = { }
	# Make terrorizer pay a fine
	option = {
		name = decentralized.23.a
		event_target:terrorizer = {
			add_resource = { influence = -50 }
			add_resource = { energy = -1000 }
			add_opinion_modifier = {
				modifier = opinion_falsely_punished
				who = ROOT
			}
		}
		event_target:terrorized = {
			add_resource = { energy = 1000 }
			add_opinion_modifier = {
				modifier = opinion_capital_helped
				who = ROOT
			}
		}
	}
	option = {
		name = decentralized.23.b
		event_target:terrorizer = {
			add_opinion_modifier = {
				modifier = opinion_overlooked_mistake
				who = ROOT
			}
		}
		event_target:terrorized = {
			add_opinion_modifier = {
				modifier = opinion_refused_justice
				who = ROOT
			}
		}
	}
}

# After harrasing a trade route one of the Member States declared war, you can intervene
country_event = {
	id = decentralized.24
	title = "decentralized.24.name"
	desc = "decentralized.24.desc"
	picture = GFX_evt_board_meeting
	is_triggered_only = yes
	immediate = { }
	# Intervene in favor of terrorized
	option = {
		name = decentralized.24.a
		join_war = event_target:terrorized
		event_target:terrorized = {
			add_opinion_modifier = {
				modifier = opinion_capital_helped
				who = ROOT
			}
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				opinion = {
					who = event_target:terrorized
					value > 50
				}
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:terrorized
					value < 0
				}
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:terrorizer
					value > 0
				}
			}
		}
	}
	# Intervene in favor of terrorizer
	option = {
		name = decentralized.24.b
		join_war = event_target:terrorizer
		event_target:terrorizer = {
			add_opinion_modifier = {
				modifier = opinion_capital_helped
				who = ROOT
			}
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				opinion = {
					who = event_target:terrorizer
					value > 50
				}
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:terrorizer
					value < 0
				}
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:terrorized
					value > 0
				}
			}
		}
	}
	# stay out of it
	option = {
		name = decentralized.24.c
		add_resource = { influence = -150 }
		ai_chance = {
			factor = 150
			modifier = {
				factor = 0.3
				opinion = {
					who = event_target:terrorizer
					value > 50
				}
			}
			modifier = {
				factor = 0.3
				opinion = {
					who = event_target:terrorized
					value > 50
				}
			}
		}
	}
}

# Respond to Member State demanding one of our systems(25)
country_event = {
	id = decentralized.26
	title = "decentralized.26.name"
	desc = "decentralized.26.desc"
	picture = GFX_evt_towel
	is_triggered_only = yes
	immediate = { }
	# accept
	option = {
		name = decentralized.26.a
		allow = {
			hidden_trigger = { has_resource = { type = influence amount > 99 } }
		}
		event_target:target_system = {
			starbase = { set_owner = event_target:demander }
		}
		add_resource = { influence = -100 }
		# Notification for demander
		country_event = { id = decentralized.27 }
		ai_chance = { factor = 40 }
	}
	# Declare war
	option = {
		name = decentralized.26.b
		event_target:demander = {
			declare_war = {
				target = ROOT
				attacker_war_goal = wg_demand_system
			}
		}
		ai_chance = { factor = 50 }
	}
}

##############################
# Events for member_states
##############################
# Opportunity to Defy the Ultimatum and declare war on overlord
country_event = {
	id = decentralized.10
	title = "decentralized.10.name"
	desc = "decentralized.10.desc"
	picture = GFX_evt_throne_room
	is_triggered_only = yes
	immediate = { }
	# Releases newly conquered system as new member_state
	option = {
		name = decentralized.10.a
		allow = {
			hidden_trigger = { has_resource = { type = influence amount > 49 } }
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0.2
				opinion = {
					who = event_target:decentralizer
					value < -60
				}
			}
			modifier = {
				factor = 0.3
				is_disloyal_to = event_target:decentralizer
			}
			modifier = {
				factor = 0.5
				has_ethic = ethic_militarist
			}
		}
		add_resource = { influence = -50 }
		country_event = { id = decentralized.11 }
	}
	option = {
		name = decentralized.10.b
		ai_chance = {
			factor = 90
			modifier = {
				factor = 0.2
				is_loyal_to = event_target:decentralizer
			}
			modifier = {
				factor = 0.2
				opinion = {
					who = event_target:decentralizer
					value > 60
				}
			}
			modifier = {
				factor = 0.5
				has_ethic = ethic_pacifist
			}
		}
		declare_war = {
			target = event_target:decentralizer
			attacker_war_goal = wg_defy_ultimatum
		}
	}
}

# ROOT = event_target:decentralizer
# new_planet owner = ultimatum_subject
country_event = {
	id = decentralized.11
	# title = "decentralized.11"
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# has_modifier = planetary_nationalism
		# FROM = {
		# 	NOT = { is_subject_type = member_state }
		# }
	}
	immediate = {
		event_target:new_planet = {
			get_vassal_species = yes
			create_country = {
				name = random
				type = default
				name_list = event_target:ultimatum_subject
				ship_prefix = ""
				flag = random
				# authority = auth_imperial
				government_restrictions = {
					authority = {
						NOR = { value = auth_machine_intelligence value = auth_hive_mind }
					}
				}
				civics = random
				species = event_target:vassal_species
				ignore_initial_colony_error = yes
				randomize_ethos = yes
				ethos = random
				day_zero_contact = no
				exclude_day_zero_contact = root
				effect = {
					set_country_flag = first_alien_life
					set_country_flag = has_encountered_other_empire
					establish_communications_no_message = ROOT
					establish_communications_no_message = event_target:ultimatum_subject

					solar_system = {
						starbase = { set_owner = PREVPREV }
					}
					set_subject_of = {
						who = ROOT
						subject_type = member_state
					}
					add_modifier = { modifier = "SUBJECT_member_state" days = -1 }
					add_resource = {
						minerals = 500
						energy = 1000
						unity = 10000
						influence = 500
					}
					copy_techs_from = {
						target = event_target:ultimatum_subject
						except = {
							tech_akx_worm_1
							tech_akx_worm_2
							tech_akx_worm_3
						}
					}
					copy_random_tech_from = {
						who = root
						progress = 0.5
					}
					root = {
						every_federation_ally = { establish_communications = PREVPREV }
						copy_random_tech_from = {
							who = event_target:ultimatum_subject
							progress = 0.5
						}
					}

					if = {
						limit = {  is_same_species = event_target:decentralizer }
						copy_ethos_and_authority = event_target:decentralizer
						change_government = {
							authority = auth_imperial
							civics = random
							remove_invalid_civics = yes cooldown = no
						}
					} else = {
						country_event = { id = regentmaker.60 }
					}
					# create_starting_leaders = yes
					country_event = { id = decentralized.209 days = 2 random = 2 } # create_starting_fleets = yes
				}
			}
			# set_owner = last_created_country
		}
	}
}

# give 200 energy
country_event = {
	id = decentralized.15
	title = "decentralized.15.name"
	desc = "decentralized.15.desc"
	picture = GFX_evt_board_meeting
	is_triggered_only = yes
	immediate = {
		add_opinion_modifier = {
			modifier = opinion_requested_200_resources
			who = event_target:resource_asker
		}
	}
	# accept
	option = {
		name = decentralized.15.a
		add_resource = { influence = 40 }
		add_resource = { energy = -250 }
		event_target:resource_asker = {
			add_resource = { energy = 250 }
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0.5
				is_disloyal_to = event_target:resource_asker
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:resource_asker
					value < -20
				}
			}
		}
	}
	# decline
	option = {
		name = decentralized.15.b
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0.3
				is_loyal_to = event_target:resource_asker
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:resource_asker
					value > 40
				}
			}
		}
		event_target:resource_asker = {
			add_opinion_modifier = {
				modifier = opinion_refused_resource_request
				who = PREV
			}
		}
	}
}

# give 500 energy
country_event = {
	id = decentralized.16
	title = "decentralized.16.name"
	desc = "decentralized.16.desc"
	picture = GFX_evt_board_meeting
	is_triggered_only = yes
	immediate = {
		add_opinion_modifier = {
			modifier = opinion_requested_500_resources
			who = event_target:resource_asker
		}
	}
	# accept
	option = {
		name = decentralized.16.a
		add_resource = { influence = 40 }
		add_resource = { energy = -500 }
		event_target:resource_asker = {
			add_resource = { energy = 500 }
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0.4
				is_disloyal_to = event_target:resource_asker
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:resource_asker
					value < -20
				}
			}
		}
	}
	# decline
	option = {
		name = decentralized.16.b
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0.5
				is_loyal_to = event_target:resource_asker
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:resource_asker
					value > 40
				}
			}
		}
		event_target:resource_asker = {
			add_opinion_modifier = {
				modifier = opinion_refused_resource_request
				who = PREV
			}
		}
	}
}

# give 1000 energy
country_event = {
	id = decentralized.17
	title = "decentralized.17.name"
	desc = "decentralized.17.desc"
	picture = GFX_evt_board_meeting
	is_triggered_only = yes
	immediate = {
		add_opinion_modifier = {
			modifier = opinion_requested_1000_resources
			who = event_target:resource_asker
		}
	}
	# accept
	option = {
		name = decentralized.17.a
		add_resource = { influence = 40 }
		add_resource = { energy = -1000 }
		event_target:resource_asker = {
			add_resource = { energy = 1000 }
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0.3
				is_disloyal_to = event_target:resource_asker
			}
			modifier = {
				factor = 0.4
				opinion = {
					who = event_target:resource_asker
					value < -20
				}
			}
		}
	}
	# decline
	option = {
		name = decentralized.17.b
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0.6
				is_loyal_to = event_target:resource_asker
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:resource_asker
					value > 40
				}
			}
		}
		event_target:resource_asker = {
			add_opinion_modifier = {
				modifier = opinion_refused_resource_request
				who = PREV
			}
		}
	}
}

# Associate of your Member State pirates in other Member State
country_event = {
	id = decentralized.21
	title = "decentralized.21.name"
	desc = "decentralized.21.desc"
	picture = GFX_evt_sentry_guns
	is_triggered_only = yes
	immediate = { }
	# Give 2000 energy credits to victim
	option = {
		name = decentralized.21.a
		add_resource = { influence = -40 }
		add_resource = { energy = -1000 }
		event_target:terrorized = {
			add_resource = { energy = 1000 }
		}
		event_target:terrorized = {
			add_opinion_modifier = {
				modifier = opinion_refused_justice
				who = event_target:terrorizer
			}
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				opinion = {
					who = event_target:terrorized
					value > 0
				}
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:terrorized
					value < 0
				}
			}
		}
	}
	# Execute pirate
	option = {
		name = decentralized.21.b
		add_resource = { influence = -150 }
		add_resource = { energy = -1500 }
		event_target:terrorized = {
			add_resource = { energy = 1500 }
		}
		event_target:terrorized = {
			add_opinion_modifier = {
				modifier = opinion_slight_insult
				who = event_target:terrorizer
			}
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				opinion = {
					who = event_target:terrorized
					value > 50
				}
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:terrorized
					value < 50
				}
			}
		}
	}
	# Don't respond
	option = {
		name = decentralized.21.c
		event_target:terrorized = {
			add_opinion_modifier = {
				modifier = opinion_support_pirates
				who = event_target:terrorizer
			}
		}
		ai_chance = {
			factor = 110
			modifier = {
				factor = 2
				opinion = {
					who = event_target:terrorized
					value < -15
				}
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:terrorized
					value > -15
				}
			}
		}
	}
	after = {
		event_target:terrorized = {
			country_event = { id = decentralized.22 }
		}
	}
}
# Response to another Member State sending pirates to harass your traders
country_event = {
	id = decentralized.22
	title = "decentralized.22.name"
	desc = "decentralized.22.desc"
	picture = GFX_evt_voting
	is_triggered_only = yes
	immediate = { }
	# report this to capital
	option = {
		name = decentralized.22.a
		add_resource = { influence = 100 }
		event_target:terrorizer = {
			add_opinion_modifier = {
				modifier = opinion_member_reported
				who = ROOT
			}
		}
		overlord = {
			add_opinion_modifier = {
				modifier = opinion_breaking_laws
				who = event_target:terrorizer
			}
		}
		overlord = {
			country_event = { id = decentralized.23 }
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				opinion = {
					who = event_target:terrorizer
					value < 0
				}
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:terrorizer
					value > 40
				}
			}
		}
	}
	# do nothing
	option = {
		name = decentralized.22.b
		add_resource = { influence = -50 }
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				opinion = {
					who = event_target:terrorizer
					value > 40
				}
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:terrorizer
					value < 20
				}
			}
		}
	}
	# declare war
	option = {
		name = decentralized.22.c
		add_resource = { influence = 100 }
		overlord = {
			add_opinion_modifier = {
				modifier = opinion_breaking_laws
				who = event_target:terrorized
			}
		}
		overlord = {
			country_event = { id = decentralized.24 }
		}
		declare_war = {
			target = event_target:terrorizer
			attacker_war_goal = wg_member_trade_war
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				opinion = {
					who = event_target:terrorizer
					value < -20
				}
			}
			modifier = {
				factor = 0.5
				opinion = {
					who = event_target:terrorizer
					value > 0
				}
			}
		}
	}
}

# Notification for getting system after demand
country_event = {
	id = decentralized.27
	title = "decentralized.27.name"
	desc = "decentralized.27.desc"
	picture = GFX_evt_diplomatic_visit
	is_triggered_only = yes
	option = { name = OK }
}

######################
# Random Events
######################
# Quarrells between random leader and Member State
country_event = {
	id = decentralized.18
	title = "decentralized.18.name"
	desc = "decentralized.18.desc"
	picture = GFX_evt_throne_room
	trigger = { has_modifier = decentralized_leader }
	mean_time_to_happen = { months = 210 }
	immediate = {
		random_owned_leader = { save_event_target_as = quarreller }
		random_subject = {
			limit = {
				OR = {
					is_subject_type = member_state
					is_country_type	= default
				}
			}
			save_event_target_as = insulted_state
		}
	}
	option = {
		name = decentralized.18.a
		event_target:quarreller = {
			kill_leader = { show_notification = no }
		}
		event_target:insulted_state = {
			add_opinion_modifier = {
				modifier = opinion_slight_insult
				who = ROOT
			}
		}
	}
	option = {
		name = decentralized.18.b
		event_target:insulted_state = {
			add_opinion_modifier = {
				modifier = opinion_refused_justice
				who = ROOT
			}
		}
	}
	option = {
		name = decentralized.18.c
		event_target:insulted_state = {
			add_opinion_modifier = {
				modifier = opinion_falsely_punished
				who = ROOT
			}
		}
		event_target:insulted_state = {
			add_resource = { energy = -1500 }
		}
		add_resource = { energy = 1500 }
	}
}

# Deserter Secret Agent Escapes to Member State with sensitive data
country_event = {
	id = decentralized.19
	title = "decentralized.19.name"
	desc = "decentralized.19.desc"
	picture = GFX_evt_dark_alley
	trigger = { has_modifier = decentralized_leader }
	mean_time_to_happen = { months = 100 }
	# immediate = { }
	# Pressure Member States into searching for the deserter
	option = {
		name = decentralized.19.a
		add_resource = { influence = -30 }
		every_subject = {
			limit = {
				OR = {
					is_subject_type = member_state
					is_country_type	= default
				}
			}
			add_opinion_modifier = {
				modifier = opinion_slight_insult
				who = ROOT
			}
		}
	}
	# Let him be
	option = {
		name = decentralized.19.b
		add_resource = { influence = -120 }
	}
}

# Member State terrorized another Member State
country_event = {
	id = decentralized.20
	# title = "decentralized.20"
	picture = GFX_evt_assembly_fight
	hide_window = yes
	trigger = { has_modifier = decentralized_leader }
	mean_time_to_happen = { months = 120 }
	immediate = {
		random_subject = {
			limit = { is_subject_type = member_state }
			save_event_target_as = terrorizer
		}
		random_subject = {
			limit = {
				OR = {
					is_subject_type = member_state
					is_country_type	= default
				}
				NOT = { is_same_empire = event_target:terrorizer }
			}
			save_event_target_as = terrorized
		}
		if = {
			limit = {
				exists = event_target:terrorizer
				exists = event_target:terrorized
			}
			event_target:terrorizer = {
				country_event = { id = decentralized.21 }
			}
		}
	}
}

# Member State choice to demands control of an uninhabited system
country_event = {
	id = decentralized.25
	title = "decentralized.25.name"
	desc = "decentralized.25.desc"
	picture = GFX_evt_partition
	trigger = {
		is_subject_type = member_state
		OR = {
			opinion = {
				who = overlord
				value < -30
			}
			is_ai = no
		}
	}
	mean_time_to_happen = { months = 390 }
	immediate = {
		# Choose random target system
		overlord = {
			random_system_within_border = { save_event_target_as = target_system }
		}
		save_event_target_as = demander
	}
	# Demand
	option = {
		name = decentralized.25.a
		add_resource = { influence = -100 }
		overlord = {
			country_event = { id = decentralized.26 }
		}
	}
	# Renounce claim
	option = { name = decentralized.25.b }
}

######################
# Election Events
######################
# election on leader change
country_event = {
	id = decentralized.201
	title = "decentralized.201.name"
	desc = "decentralized.201.desc"
	picture = GFX_evt_announcement
	is_triggered_only = yes
	trigger = { has_modifier = electoral }
	immediate = {
		save_event_target_as = last_leader
		set_variable = { which = election_count value = 0 }
		every_subject = {
			limit = { is_subject_type = member_state }
			set_variable = { which = election_count value = 0 }
			country_event = { id = decentralized.202 }
			set_country_flag = decentralized_electing
		}
	}
	option = { name = OK }
}

# Voting Event
country_event = {
	id = decentralized.202
	title = "decentralized.202.name"
	desc = "decentralized.202.desc"
	picture = GFX_evt_voting
	is_triggered_only = yes
	immediate = {
		# random_playable_country = {
		# 	limit = {
		# 		is_subject_type = member_state
		# 		event_target:last_leader = { is_overlord_to = PREV }
		# 	}
		# 	save_event_target_as = election_target1
		# }
		# random_playable_country = {
		# 	limit = {
		# 		is_subject_type = member_state
		# 		event_target:last_leader = { is_overlord_to = PREV }
		# 	}
		# 	save_event_target_as = election_target2
		# }
		# random_playable_country = {
		# 	limit = {
		# 		is_subject_type = member_state
		# 		event_target:last_leader = { is_overlord_to = PREV }
		# 	}
		# 	save_event_target_as = election_target3
		# }
		overlord = {
			random_subject = {
				limit = {
					is_subject_type = member_state
					# NOR = { is_same_empire = FROM
					NAND = {
						exists = event_target:election_target3
						is_same_empire = event_target:election_target3
					}
					# }
				}
				save_event_target_as = election_target1
			}
			random_subject = {
				limit = {
					is_subject_type = member_state
					exists = event_target:election_target1
					NOR = {
						is_same_empire = FROM
						is_same_empire = event_target:election_target1
					}
				}
				save_event_target_as = election_target2
			}
			random_subject = {
				limit = {
					is_subject_type = member_state
					exists = event_target:election_target2
					NOR = {
						is_same_empire = FROM
						is_same_empire = event_target:election_target2
					}
				}
				save_event_target_as = election_target3
			}
		}
	}
	option = {
		# Vote for leader
		name = decentralized.202.a
		event_target:last_leader = {
			change_variable = { which = election_count value = 1 }
		}
		ai_chance = {
			factor = 150
			modifier = {
				factor = 1.2
				is_loyal_to = event_target:last_leader
			}
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:last_leader
					value > 100
				}
			}
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:last_leader
					value > 200
				}
			}
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:last_leader
					value > 300
				}
			}
			modifier = {
				factor = 0.2
				is_disloyal_to = event_target:last_leader
			}
			modifier = {
				factor = 0.6
				relative_power = {
					who = event_target:last_leader
					category = all
					value > equivalent
				}
			}
		}
	}
	option = {
		# Vote for himself
		name = decentralized.202.b
		change_variable = { which = election_count value = 1 }
		ai_chance = {
			factor = 130
			modifier = {
				factor = 0.9
				is_loyal_to = event_target:last_leader
			}
			modifier = {
				factor = 1.6
				relative_power = {
					who = event_target:last_leader
					category = all
					value > inferior
				}
			}
		}
	}
	option = {
		name = decentralized.202.c
		event_target:election_target1 = {
			change_variable = { which = election_count value = 1 }
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:election_target1
					value > 100
				}
			}
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:election_target1
					value > 200
				}
			}
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:election_target1
					value > 300
				}
			}
			modifier = {
				factor = 1.6
				event_target:election_target1 = {
					relative_power = {
						who = event_target:last_leader
						category = all
						value > equivalent
					}
				}
			}
			modifier = {
				factor = 1.2
				is_disloyal_to = event_target:last_leader
			}
		}
	}
	option = {
		name = decentralized.202.d
		trigger = { exists = event_target:election_target2 }
		event_target:election_target2 = {
			change_variable = { which = election_count value = 1 }
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:election_target2
					value > 100
				}
			}
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:election_target2
					value > 200
				}
			}
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:election_target2
					value > 300
				}
			}
			modifier = {
				factor = 1.6
				event_target:election_target2 = {
					relative_power = {
						who = event_target:last_leader
						category = all
						value > equivalent
					}
				}
			}
			modifier = {
				factor = 1.2
				is_disloyal_to = event_target:last_leader
			}
		}
	}
	option = {
		name = decentralized.202.e
		trigger = { exists = event_target:election_target3 }
		event_target:election_target3 = {
			change_variable = { which = election_count value = 1 }
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:election_target3
					value > 100
				}
			}
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:election_target3
					value > 200
				}
			}
			modifier = {
				factor = 1.2
				opinion = {
					who = event_target:election_target3
					value > 300
				}
			}
			modifier = {
				factor = 1.6
				event_target:election_target3 = {
					relative_power = {
						who = event_target:last_leader
						category = all
						value > equivalent
					}
				}
			}
			modifier = {
				factor = 1.2
				is_disloyal_to = event_target:last_leader
			}
		}
	}
	after = {
		remove_country_flag = decentralized_electing
		country_event = { id = decentralized.203 }
	}
}

# Checks if election is over
country_event = {
	id = decentralized.203
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = {
			event_target:last_leader = {
				any_subject = {
					is_subject_type = member_state
					has_country_flag = decentralized_electing
				}
			}
		}
	}
	immediate = {
		event_target:last_leader = {
			every_subject = {
				limit = { is_subject_type = member_state }
				country_event = { id = decentralized.204 }
			}
			country_event = { id = decentralized.205 days = 4 } # Notify
		}
	}
}

# Check if winner
country_event = {
	id = decentralized.204
	title = "decentralized.204.name"
	desc = "decentralized.204.desc"
	picture = GFX_evt_announcement
	is_triggered_only = yes
	trigger = {
		event_target:last_leader = {
			check_variable = { which = election_count value < PREV }
		}
	}
	immediate = {
		save_event_target_as = decentralized_winner
		add_modifier = { modifier = decentralized_leader days = -1 }
		add_modifier = { modifier = electoral days = -1 }
		set_subject_of = { who = none }
		event_target:last_leader = {
			set_timed_country_flag = { flag = decentralized_lost days = 12 }
			country_event = { id = decentralized.206 days = 1 } # Notify
			every_subject = {
				limit = { is_subject_type = member_state } # not absolute?
				set_subject_of = {
					who = ROOT
					subject_type = member_state
				}
				country_event = { id = decentralized.207 } # Notify generally
			}
			set_subject_of = {
				who = ROOT
				subject_type = member_state
			}
			remove_modifier = decentralized_leader
			remove_modifier = electoral
		}
	}
	option = { name = OK }
}

# Last Leader won, notification for them
country_event = {
	id = decentralized.205
	title = "decentralized.205.name"
	desc = "decentralized.205.desc"
	picture = GFX_evt_announcement
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = decentralized_lost }
	}
	immediate = {
		save_event_target_as = decentralized_winner
		every_subject = {
			country_event = { id = decentralized.207 } # Notify
		}
	}
	option = { name = OK }
}

# Last leader lost, notification for them
country_event = {
	id = decentralized.206
	title = "decentralized.206.name"
	desc = "decentralized.206.desc"
	picture = GFX_evt_throne_room
	is_triggered_only = yes
	# immediate = {}
	option = { name = OK }
}

# Announces winner (generally)
country_event = {
	id = decentralized.207
	title = "decentralized.207.name"
	desc = "decentralized.207.desc"
	picture = GFX_evt_announcement
	is_triggered_only = yes
	# immediate = {}
	option = { name = OK }
}

# This = subject
# From = subject's overlord
# Opportunity to join Overlord's vassals into Member States
country_event = {
	id = decentralized.214
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		FROM = {
			has_country_flag = decentralizer
			has_ascension_perk = ap_decentralization
		}
		NOT = { is_subject_type = member_state }
		OR = {
			is_country_type = default
			is_subject_type = vassal
			is_subject_type = subsidiary
		}
	}
	immediate = {
		FROM = {
			country_event = { id = decentralized.7 days = 20 random = 10 }
		}
	}
}

## FINAL Decrease Subjects
# This = Overlord
country_event = {
	id = decentralized.215
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_overlord = yes
		has_country_flag = decentralizer
		has_ascension_perk = ap_decentralization
	}
	immediate = {
		# log="FINAL [This.subject_member]"
		set_update_modifiers_batch = begin
		if = { limit = { check_variable = { which = subject_member value > 7 } }
			every_subject = {
				limit = { is_subject_type = member_state controlled_systems < 4 }
				if = { limit = { controlled_systems < 3 }
					random_neighbor_country = {
						limit = {
							is_subject = yes
							is_subject_type = member_state
							ROOT = { is_overlord_to = PREV }
						}
						fully_commit_to_empire = yes
					}
				}
				else_if = { limit = { check_variable = { which = subject_member value > 10 } }
					# Reduce members
					random_neighbor_country = {
						limit = {
							is_subject = yes
							# is_loyal_to = ROOT
							ROOT = { is_overlord_to = PREV }
							OR = {
								is_subject_type = member_state
								is_country_type	= default
							}
							# OR = { is_same_empire = ROOT
						}
						fully_commit_to_empire = yes
					}
				}
			}
		}
		## Finally, give at least a few more systems to each subject

		every_subject = {
			limit = { is_subject_type = member_state }
			if = {
				limit = { empire_sprawl_cap_fraction > 2.0 }
				random_system_within_border = {
					limit = {
						NOT = { any_system_planet = { is_capital = yes } }
					}
					closest_system = {
						# min_steps = 1
						max_steps = 3
						# use_bypasses = yes # to much performance?
						limit = {
							NOR = {
								has_star_flag = decentral_excluded
								any_system_planet = { is_capital = yes }
							}
							has_owner = yes
							is_owned_by = ROOT
						}
						starbase = { set_owner = PREVPREVPREV }
					}
				}
			}
			if = {
				limit = {
					exists = this # without the game crashes
					has_country_flag = day_0
				}
				copy_techs_from = {
					target = ROOT
					except = {
						# Horizon Signal
						tech_akx_worm_1
						tech_akx_worm_2
						tech_akx_worm_3
					}
				}
				# TODO not working!?
				country_event = { id = decentralized.209 days = 3 random = 3 } # create_starting_fleets = yes # TODO later ?
			}
		}
		# NEEDS TEST
		if = {
			limit = { empire_sprawl_cap_fraction > 2.0 }
			# Give one more system to each subject!?
			every_subject = {
				limit = { is_subject_type = member_state }
				ROOT = {
					random_system_within_border = {
						limit = {
							has_owner = yes
							NOR = {
								has_star_flag = decentral_excluded
								any_system_planet = { is_capital = yes }
								# any_bordering_country = { is_same_empire = root } # seems to include always own empire
								any_neighbor_system = { is_owned_by = ROOT }
							}
						}
						closest_system = {
							# min_steps = 1
							max_steps = 3
							use_bypasses = no
							limit = {
								has_owner = yes
								owner = {
									is_subject = yes
									is_subject_type = member_state
									ROOT = { is_overlord_to = PREV }
								}
							}
							PREV.starbase = { set_owner = PREV.space_owner }
						}
					}
				}
			}
		}

		every_system_within_border = {
			# limit = { has_owner = yes }
			# Give lonley systems to subjects
			if = {
				limit = {
					NOR = {
						has_star_flag = decentral_excluded
						any_system_planet = { is_capital = yes }
						# any_bordering_country = { is_same_empire = root }
						any_neighbor_system = { is_owned_by = ROOT }
					}
				}
				closest_system = {
					limit = {
						has_owner = yes
						owner = {
							is_subject = yes
							is_subject_type = member_state
							ROOT = { is_overlord_to = PREV }
						}
					}
					# min_steps = 1
					max_steps = 2
					# use_bypasses = yes # to much performance?
					PREV.starbase = { set_owner = PREV.space_owner }
				}
			}
			# Final flag remove
			if = {
				limit = { has_star_flag = decentral_excluded }
				remove_star_flag = decentral_excluded
			}
		}

		every_federation_ally = { establish_communications = PREVPREV }
		# every_relation = {
		# 	establish_communications_no_message = PREVPREV
		# }
		set_update_modifiers_batch = end
	}
}

# create_starting_fleets
# This = last_created_country/subject country
country_event = {
	id = decentralized.209
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# has_country_flag = decentralizer
		# has_ascension_perk = ap_decentralization
		exists = event_target:decentralizer
		event_target:decentralizer = { is_scope_valid = yes is_scope_type = country }
	}
	immediate = {
		add_resource = {
			energy = 2000
			minerals = 200
			unity = 200000
			influence = 200
		}
		# if = {
		# 	limit = { NOT = { exists = event_target:decentralizer } }
		# 	if = {
		# 		limit = { ROOT = { is_scope_type = country } }
		# 		ROOT = { save_global_event_target_as = decentralizer }
		# 	} else = { break = yes }
		# }
		create_starting_leaders = yes
		## Civil
		every_owned_planet = {
			limit = { OR = { is_colony = yes is_under_colonization = yes } }
			solar_system = {
		# every_system_within_border = {
		# 	limit = { any_owned_planet = { has_owner = yes is_colony = yes } }
			random_fleet_in_system = {
				limit = {
					exists = owner
					is_owned_by = event_target:decentralizer
					# owner = { is_same_empire = event_target:decentralizer }
					OR = {
						is_ship_class = shipclass_constructor
						is_ship_class = shipclass_science_ship
						is_ship_class = shipclass_transport
						is_ship_class = shipclass_colonizer
					}
				}
				# log="create_starting_fleets [From.Owner.GetName]"
				set_owner = PREVPREVPREV
				if = {
					limit = {
						is_ship_class = shipclass_science_ship
						exists = leader
					}
					leader = { set_owner = PREVPREVPREVPREV }
					assign_leader = leader
				}
				else_if = {
					limit = { is_ship_class = shipclass_transport }
					# TODO: replace scope workaround for ship.army bug !?
					# give armies (general)
					event_target:decentralizer = {
						every_owned_army = {
							limit = {
								exists = fleet
								NOT = { is_owned_by = PREV }
								# fleet = { is_same_value = PREVPREVPREV }
							}
							set_owner = fleet.owner
						}
					}
					# set leader
					if = {
						limit = { exists = leader }
						PREVPREVPREV = {
							random_owned_army = {
								limit = {
									exists = fleet
									# NOT = { exists = leader }
								}
								assign_leader = PREVPREV.leader
								# PREV = {
								# 	random_owned_leader = {
								# 		limit = { leader_class = general }
								# 		PREVPREV = {
								# 			assign_leader = PREV
								# 			log = "[This.GetName]"
								# 		}
								# 	}
								# }
							}
						}
						leader = { set_owner = PREVPREVPREVPREV }
					}
				}
			} }
		}
		# create_fleet = {
		# 	effect = {
		# 		set_owner = PREV
		# 		create_ship = {
		# 			name = random
		# 			random_existing_design = science
		# 			# graphical_culture =
		# 		}
		# 		set_location = {
		# 			target = PREV.capital_scope
		# 			distance = 10
		# 			angle = random
		# 		}
		# 		set_fleet_stance = evasive
		# 	}
		# }
		# create_fleet = {
		# 	effect = {
		# 		set_owner = PREV
		# 		create_ship = {
		# 			name = random
		# 			random_existing_design = constructor
		# 			# graphical_culture =
		# 		}
		# 		set_location = {
		# 			target = PREV.capital_scope
		# 			distance = 10
		# 			angle = random
		# 		}
		# 		set_fleet_stance = evasive
		# 	}
		# }
		## Military
		if = {
			limit = {
				event_target:decentralizer = { used_naval_capacity_percent > 0.6 }
			}
			random_system_within_border = {
				limit = {
					any_fleet_in_system = {
						exists = owner
						is_ship_class = shipclass_military
						fleet_size > 3
						owner = { is_same_empire = event_target:decentralizer }
					}
				}
				random_fleet_in_system = {
					limit = {
						exists = owner
						is_ship_class = shipclass_military
						fleet_size > 3
						owner = { is_same_empire = event_target:decentralizer }
					}
					set_owner = PREVPREV
					if = {
						limit = { exists = leader }
						leader = { set_owner = PREVPREVPREV }
						assign_leader = leader
					}
				}
			}
		}
		if = {
			limit = {
				event_target:decentralizer = { used_naval_capacity_percent > 1.2 }
				used_naval_capacity_percent < 1
			}
			random_system_within_border = {
				limit = {
					any_fleet_in_system = {
						exists = owner
						is_ship_class = shipclass_military
						fleet_size > 3
						owner = { is_same_empire = event_target:decentralizer }
					}
				}
				random_fleet_in_system = {
					limit = {
						exists = owner
						is_ship_class = shipclass_military
						fleet_size > 3
						owner = { is_same_empire = event_target:decentralizer }
					}
					set_owner = PREVPREV
					if = {
						limit = { exists = leader }
						leader = { set_owner = PREVPREVPREV }
						assign_leader = leader
					}
				}
			}
		}
		if = {
			limit = { used_naval_capacity_percent < 0.2 }
			random_system_within_border = {
				limit = {
					any_fleet_in_system = {
						exists = owner
						is_ship_class = shipclass_military
						owner = { is_same_empire = event_target:decentralizer }
					}
				}
				random_fleet_in_system = {
					limit = {
						exists = owner
						is_ship_class = shipclass_military
						owner = { is_same_empire = event_target:decentralizer }
					}
					set_owner = PREVPREV
					if = {
						limit = { exists = leader }
						leader = { set_owner = PREVPREVPREV }
						assign_leader = leader
					}
				}
			}
		}

		country_event = { id = game_start.6 days = 6 random = 2 } # advanced_empire
		country_event = { id = game_start.8 days = 9 random = 3 } # +tech +resources
		country_event = { id = game_start.9 days = 12 random = 4 } # empire_init_create_ships
		capital_scope = {
			planet_event = { id = game_start.20 days = 80 random = 30 } # remove blockers on capital
			planet_event = { id = game_start.21 days = 120 random = 40 } # upgrade colony shelter on additional colonies
			planet_event = { id = game_start.22 days = 180 random = 60 } # set up additional buildings (mines, farms, power plants)
			planet_event = { id = game_start.23 days = 360 random = 90 } # add additional pops
		}
	}
}
